[
  {
    "key": "1",
    "type": "py",
    "path": "test3/test_python.py",
    "name": "test_python.py",
    "content": {},
    "code": "print('Hello World')\nprint('Test')\n\nif True:\n    print('Hello World')\n    print('Test')\n\n\ndef foo():\n    print('Hello World')\n    print('Test')\n\n    if True:\n        print('Hello World')\n        print('Test')\n\nif True:\n    print('Hello World')\n    print('Test')\n\n\nprint('Hello World')\n\nprint('Test')",
    "selectable": true,
    "fileId": "192.168.65.1twerbkik25t2024-07-07353",
    "translate": false
  },
  {
    "key": "2",
    "type": "html",
    "path": "test3/test_html.html",
    "name": "test_html.html",
    "content": {},
    "code": { "success": false, "error": "Failed to fetch" },
    "selectable": true,
    "fileId": "192.168.65.1twerbkik25t2024-07-07354",
    "translate": true,
    "completed": true
  },
  {
    "key": "3",
    "type": "java",
    "path": "test3/test1.java",
    "name": "test1.java",
    "content": {},
    "code": "import java.util.Scanner;\n\n    public class test1 {\n\n        private static void bubble(int[] arr, int length){\n            int i, j, t; \n\n            for (i = length -2; i >=0; i--){\n                for (j=0; j<=i; j++){\n                    if (arr[j] > arr[j+1]){\n                        t = arr[j]; \n                        arr[j] = arr[j+1]; \n                        arr[j+1] = t; \n                    }\n                }\n            }\n        }\n\n        public static void main(String[] arrs) {\n            int[] arr = new int[100]; \n            int n, i;\n\n            System.out.printf(\"\\n\\n 输入要排序的整数元素数量：\");\n            \n            Scanner scanner = new Scanner(System.in);\n            n = scanner.nextInt(); \n            scanner.close(); \n\n            for (i = 0; i < n; i++){\n                System.out.printf(\"\\n\\n 为第 %d 个元素输入整数值：\", i+1);\n                arr[i] = scanner.nextInt(); \n            }\n\n            bubble(arr,n); \n\n            System.out.printf(\"\\n\\n 最终排序后的数组为：\"); \n            for (i = 0; i<= n-1; i++){\n                System.out.printf(\"%d \", arr[i]);\n            }\n        }\n    }",
    "selectable": true,
    "fileId": "192.168.65.1twerbkik25t2024-07-07355",
    "translate": false
  },
  {
    "key": "4",
    "type": "py",
    "path": "test3/long_code.py",
    "name": "long_code.py",
    "content": {},
    "code": "def long_function():\n    # This is a long function to test the CodeTranslator\n    for i in range(10):\n        print(\"This is line number\", i)\n        if i % 2 == 0:\n            print(\"Even number:\", i)\n        else:\n            print(\"Odd number:\", i)\n    \n    # Adding more lines to ensure it's long enough\n    for j in range(20):\n        print(\"Another loop, line number\", j)\n        if j % 3 == 0:\n            print(\"Multiple of 3:\", j)\n        elif j % 5 == 0:\n            print(\"Multiple of 5:\", j)\n        else:\n            print(\"Not a multiple of 3 or 5:\", j)\n    \n    # Another set of lines\n    for k in range(30):\n        print(\"Yet another loop, line number\", k)\n        if k % 4 == 0:\n            print(\"Multiple of 4:\", k)\n        elif k % 6 == 0:\n            print(\"Multiple of 6:\", k)\n        else:\n            print(\"Not a multiple of 4 or 6:\", k)\n\n    # Final set of lines\n    for l in range(40):\n        print(\"Final loop, line number\", l)\n        if l % 7 == 0:\n            print(\"Multiple of 7:\", l)\n        elif l % 8 == 0:\n            print(\"Multiple of 8:\", l)\n        else:\n            print(\"Not a multiple of 7 or 8:\", l)\n\nif __name__ == \"__main__\":\n    long_function()\n",
    "selectable": true,
    "fileId": "192.168.65.1twerbkik25t2024-07-07356",
    "translate": false
  },
  {
    "key": "5",
    "type": "py",
    "path": "test3/test1_python.py",
    "name": "test1_python.py",
    "content": {},
    "code": "def bubble(arr):\n    length = len(arr)\n    for i in range(length - 1):\n        for j in range(0, length - i - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n\ndef main():\n    arr = []\n    n = int(input(\"\\n\\n 输入要排序的整数元素数量：\"))\n    for i in range(n):\n        num = int(input(\"\\n\\n 为第 {} 个元素输入整数值：\".format(i + 1)))\n        arr.append(num)\n    bubble(arr)\n    print(\"\\n\\n 最终排序后的数组为：\", end=\" \")\n    for num in arr:\n        print(num, end=\" \")\n\n\nmain()\n",
    "selectable": true,
    "fileId": "192.168.65.1twerbkik25t2024-07-07357",
    "translate": false
  },
  {
    "key": "10",
    "type": "java",
    "path": "test3/zuccini/nestedTest.java",
    "name": "nestedTest.java",
    "content": {},
    "code": "import java.util.Scanner;\n\n    public class test1 {\n\n        private static void bubble(int[] arr, int length){\n            int i, j, t; \n\n            for (i = length -2; i >=0; i--){\n                for (j=0; j<=i; j++){\n                    if (arr[j] > arr[j+1]){\n                        t = arr[j]; \n                        arr[j] = arr[j+1]; \n                        arr[j+1] = t; \n                    }\n                }\n            }\n        }\n\n        public static void main(String[] arrs) {\n            int[] arr = new int[100]; \n            int n, i;\n\n            System.out.printf(\"\\n\\n 输入要排序的整数元素数量：\");\n            \n            Scanner scanner = new Scanner(System.in);\n            n = scanner.nextInt(); \n            scanner.close(); \n\n            for (i = 0; i < n; i++){\n                System.out.printf(\"\\n\\n 为第 %d 个元素输入整数值：\", i+1);\n                arr[i] = scanner.nextInt(); \n            }\n\n            bubble(arr,n); \n\n            System.out.printf(\"\\n\\n 最终排序后的数组为：\"); \n            for (i = 0; i<= n-1; i++){\n                System.out.printf(\"%d \", arr[i]);\n            }\n        }\n    }",
    "selectable": true,
    "fileId": "192.168.65.1twerbkik25t2024-07-07358",
    "translate": false
  },
  {
    "key": "11",
    "type": "sql",
    "path": "test3/zuccini/sql.sql",
    "name": "sql.sql",
    "content": {},
    "code": "-- 1. Create tables\nCREATE TABLE employees (\n    employee_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    department_id INT,\n    salary DECIMAL(10, 2),\n    hire_date DATE\n);\n\nCREATE TABLE departments (\n    department_id INT PRIMARY KEY,\n    department_name VARCHAR(50),\n    manager_id INT\n);\n\nCREATE TABLE projects (\n    project_id INT PRIMARY KEY,\n    project_name VARCHAR(100),\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE employee_projects (\n    employee_id INT,\n    project_id INT,\n    hours_worked INT,\n    PRIMARY KEY (employee_id, project_id)\n);\n\n-- 2. Insert data into tables\nINSERT INTO employees (employee_id, first_name, last_name, department_id, salary, hire_date) VALUES\n(1, 'John', 'Doe', 1, 60000, '2015-01-15'),\n(2, 'Jane', 'Smith', 2, 75000, '2017-03-23'),\n(3, 'Alice', 'Johnson', 1, 50000, '2019-07-19'),\n(4, 'Bob', 'Brown', 3, 82000, '2013-11-04'),\n(5, 'Charlie', 'Davis', 2, 67000, '2020-05-14');\n\nINSERT INTO departments (department_id, department_name, manager_id) VALUES\n(1, 'Engineering', 1),\n(2, 'Marketing', 2),\n(3, 'Sales', 4);\n\nINSERT INTO projects (project_id, project_name, start_date, end_date) VALUES\n(1, 'Project A', '2021-01-01', '2021-12-31'),\n(2, 'Project B', '2021-06-01', '2022-06-01'),\n(3, 'Project C', '2022-01-01', '2022-12-31');\n\nINSERT INTO employee_projects (employee_id, project_id, hours_worked) VALUES\n(1, 1, 120),\n(1, 2, 100),\n(2, 1, 150),\n(3, 3, 200),\n(4, 1, 90),\n(4, 2, 110),\n(5, 3, 180);\n\n-- 3. Nested query using CTE (Common Table Expressions)\nWITH department_salaries AS (\n    SELECT department_id, SUM(salary) AS total_salary\n    FROM employees\n    GROUP BY department_id\n),\nhighest_salary_department AS (\n    SELECT department_id\n    FROM department_salaries\n    ORDER BY total_salary DESC\n    LIMIT 1\n)\nSELECT e.employee_id, e.first_name, e.last_name, d.department_name\nFROM employees e\nJOIN departments d ON e.department_id = d.department_id\nWHERE e.department_id = (SELECT department_id FROM highest_salary_department);\n\n-- 4. Aggregations and window functions\nSELECT e.department_id, e.employee_id, e.first_name, e.salary,\n       AVG(e.salary) OVER (PARTITION BY e.department_id) AS avg_department_salary,\n       RANK() OVER (PARTITION BY e.department_id ORDER BY e.salary DESC) AS salary_rank\nFROM employees e\nORDER BY e.department_id, salary_rank;\n\n-- 5. Subquery inside a JOIN operation\nSELECT e.employee_id, e.first_name, e.last_name, p.project_name, ep.hours_worked\nFROM employees e\nJOIN employee_projects ep ON e.employee_id = ep.employee_id\nJOIN projects p ON ep.project_id = p.project_id\nWHERE ep.project_id = (SELECT project_id FROM projects WHERE project_name = 'Project B');\n\n-- 6. Multiple JOINs and filters\nSELECT e.employee_id, e.first_name, e.last_name, d.department_name, p.project_name, ep.hours_worked\nFROM employees e\nJOIN departments d ON e.department_id = d.department_id\nJOIN employee_projects ep ON e.employee_id = ep.employee_id\nJOIN projects p ON ep.project_id = p.project_id\nWHERE d.department_name = 'Engineering' AND ep.hours_worked > 100\nORDER BY e.last_name, p.project_name;\n",
    "selectable": true,
    "fileId": "192.168.65.1twerbkik25t2024-07-07359",
    "translate": false
  }
]
